// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                       String                 @id @db.Uuid
  dodId                    String?                @unique
  firstName                String?
  lastName                 String?
  middleName               String?
  email                    String?                @unique
  createdAt                DateTime?              @default(now()) @map("created_at")
  updatedAt                DateTime?              @updatedAt @map("updated_at")
  lastLogin                DateTime?
  role                     Role?                  @relation(fields: [roleId], references: [id])
  roleId                   Int?
  organization             Organization?          @relation(fields: [organizationId], references: [id])
  organizationId           String?                @db.Uuid
  tags                     Tag[]
  memberTrackingItems      MemberTrackingItem[]
  traineeTrackingRecords   MemberTrackingRecord[] @relation(name: "TraineeRecords")
  authorityTrackingRecords MemberTrackingRecord[] @relation(name: "AuthorityRecords")
  rank                     String?
  afsc                     String?
  dutyTitle                String?
  address                  String?



  @@map(name: "user")
}

model Tag {
  id    Int     @id @default(autoincrement())
  name  String?
  users User[]
}

model MemberTrackingRecord {
  id                  Int                @id @default(autoincrement())
  traineeSignedDate   DateTime?          @map("trainee_signed_date")
  authoritySignedDate DateTime?          @map("authority_signed_date")
  authority           User?              @relation(name: "AuthorityRecords", fields: [authorityId], references: [id])
  authorityId         String?            @map("authority_id") @db.Uuid
  trainee             User?              @relation(name: "TraineeRecords", fields: [traineeId], references: [id])
  completedDate       DateTime?          @map("completed_date")
  order               Int
  trackingItem        TrackingItem?      @relation(fields: [trackingItemId], references: [id])
  memberTrackingItems MemberTrackingItem @relation(fields: [traineeId, trackingItemId], references: [userId, trackingItemId])
  traineeId           String             @map("trainee_id") @db.Uuid
  trackingItemId      Int                @map("tracking_item_id")

  @@map("member_tracking_record")
}

model MemberTrackingItem {
  //Compound key of userId and trackingItemId
  isActive              Boolean
  user                  User                   @relation(fields: [userId], references: [id])
  userId                String                 @db.Uuid
  trackingItem          TrackingItem           @relation(fields: [trackingItemId], references: [id])
  trackingItemId        Int
  memberTrackingRecords MemberTrackingRecord[]

  //compositeid userid_trackingitemids
  @@id([userId, trackingItemId])
  @@map("member_tracking_item")
}

model Organization {
  id        String         @id @db.Uuid
  name      String
  //Self reference
  parent    Organization?  @relation(name: "ParentChildren", fields: [parentId], references: [id])
  parentId  String?        @db.Uuid
  children  Organization[] @relation(name: "ParentChildren")
  users     User[]
  templates Template[]

  @@map("organization")
}

model TrackingItem {
  id                   Int                    @id @default(autoincrement())
  title                String                 @unique
  description          String
  interval             Int? //days
  memberTrackingRecord MemberTrackingRecord[]
  templates            TemplateTrackingItem[]

  MemberTrackingItem MemberTrackingItem[]
  @@map("training_record")
}

model TemplateTrackingItem {
  id             Int          @id @default(autoincrement())
  require        Boolean
  trackingItem   TrackingItem @relation(fields: [trackingItemId], references: [id])
  trackingItemId Int
  template       Template     @relation(fields: [templateId], references: [id])
  templateId     Int


  @@map("template_tracking_item")
}

model Template {
  id            Int                    @id @default(autoincrement())
  name          String
  trackingItems TemplateTrackingItem[]
  organizations Organization[]

  @@map("template")
}

model Role {
  id     Int     @id @default(autoincrement())
  name   String  @unique @map("name")
  user   User[]
  grants Grant[]

  @@map(name: "role")
}

model Resource {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  grant Grant[]

  @@map(name: "resource")
}

model Grant {
  id            Int      @id @default(autoincrement())
  action        String
  attributes    String
  resourceModel Resource @relation(fields: [resource], references: [name])
  resource      String   @map("resource_name")
  roleModel     Role     @relation(fields: [role], references: [name])
  role          String   @map("role_name")

  @@map(name: "grant")
}
